from aiogram import types
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandObject
from aiogram.types.input_file import FSInputFile

from dblogic.database import database

from botlogic.settings import bot

import logging
from tabulate import tabulate

from botlogic.handlers.base_command import identification_user
from botlogic.components import keyboard



async def secret_code_handler(message: Message, state: FSMContext) -> None:
    await identification_user(message=message, state=state)
    user_info = await state.get_data()
    database.user_set_admin(tg_id=user_info['tg_id'], is_admin=1)
        
    await message.answer(
        '–¢–µ–ø–µ—Ä—å –í—ã - –ê–¥–º–∏–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–º–∞–Ω–¥—ã –Ω–∞ /admin_commands',
        reply_markup=keyboard
    )
    

async def admin_commands_handler(message: Message, state: FSMContext) -> None:
    await identification_user(message=message, state=state)
        
    user_info = await state.get_data()
    if not user_info['is_admin']:
        return
        
    await message.answer(
        '–í—ã - –ê–¥–º–∏–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã:\n/get_admin_25634 - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞\n/admin_commands - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω–∞–º\n/get_user_by_id [user_id] - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ [üîëID]\n/get_user_by_name [username] - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ [–ò–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]\n/give_admin [user_id] - –í—ã–¥–∞—Ç—å –ø—Ä–æ–≤–∞ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –µ–≥–æ [üîëID]\n/remove_admin [user_id] - –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ [üîëID]\n/get_users_info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö\n/get_logs - –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥ —Ñ–∞–π–ª –±–æ—Ç–∞\n/give_sub [user_id] - –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –Ω–µ–¥–µ–ª—é –ø–æ –µ–≥–æ [üîëID]',
        reply_markup=keyboard
    )
    

async def process_user(user_info) -> dict:
    return {
        'id': user_info[0],
        'tg_id': user_info[1],
        'username': user_info[2],
        'is_admin': user_info[3],
        'sub_start': user_info[4],
        'sub_end': user_info[5],
        'pay_money': user_info[6],
        'town_search': user_info[7]
    }
    

async def get_user_by_id_handler(message: Message, state: FSMContext, command: CommandObject) -> None:
    await identification_user(message=message, state=state)
    
    user_info = await state.get_data()
    if not user_info['is_admin']:
        return
    
    user_id = command.args
    if not user_id:
        await message.answer(
            '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ [üîëID] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–ø–∏–º–µ—Ä /get_user_by_id 123456789',
            reply_markup=keyboard
        )
        return
    
    try:
        user_info = database.get_user_by_tg_id(tg_id=user_id)
        user_info = await process_user(user_info)
        
        text = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {user_id}\n'
        for row_name in user_info:
            text += f'<b>{row_name}</b> - {user_info[row_name]}\n'
        await message.answer(
            text,
            reply_markup=keyboard
        ) 
    except:
        await message.answer(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω',
            reply_markup=keyboard
        )
        

async def get_user_by_username_handler(message: Message, state: FSMContext, command: CommandObject) -> None:
    await identification_user(message=message, state=state)
    
    user_info = await state.get_data()
    if not user_info['is_admin']:
        return
    
    username = command.args
    if not username:
        await message.answer(
            '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ [–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]. –ù–∞–ø–∏–º–µ—Ä /get_user_by_name durov',
            reply_markup=keyboard
        )
        return
    
    try:
        user_info = database.get_user_by_username(username=username)
        user_info = await process_user(user_info)
        
        text = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {username}\n'
        for row_name in user_info:
            text += f'<b>{row_name}</b> - {user_info[row_name]}\n'
        await message.answer(
            text,
            reply_markup=keyboard
            
        ) 
    except:
        await message.answer(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username={username} –Ω–µ –Ω–∞–π–¥–µ–Ω',
            reply_markup=keyboard
        )


async def give_admin_handler(message: Message, state: FSMContext, command: CommandObject) -> None:
    await identification_user(message=message, state=state)
    
    user_info = await state.get_data()
    if not user_info['is_admin']:
        return
    
    user_id = command.args
    if not user_id:
        await message.answer(
            '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ [üîëID] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–ø–∏–º–µ—Ä /get_user_by_id 123456789',
            reply_markup=keyboard
        )
        return
    
    try:
        database.user_set_admin(tg_id=user_id, is_admin=1)
        await message.answer(
            f'–ê–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id={user_id}',
            reply_markup=keyboard
        )
    except:
        await message.answer(
            f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ê–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id={user_id}',
            reply_markup=keyboard
        )
        

async def remove_admin_handler(message: Message, state: FSMContext, command: CommandObject) -> None:
    await identification_user(message=message, state=state)
    
    user_info = await state.get_data()
    if not user_info['is_admin']:
        return
    
    user_id = command.args
    if not user_id:
        await message.answer(
            '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ [üîëID] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–ø–∏–º–µ—Ä /get_user_by_id 123456789',
            reply_markup=keyboard
        )
        return
    
    try:
        database.user_set_admin(tg_id=user_id, is_admin=0)
        await message.answer(
            f'–ó–∞–±—Ä–∞–ª–∏ –ê–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id={user_id}',
            reply_markup=keyboard
        )
    except:
        await message.answer(
            f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–±—Ä–∞—Ç—å –ê–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id={user_id}',
            reply_markup=keyboard
        )
        

async def get_users_handler(message: Message, state: FSMContext) -> None:
    await identification_user(message=message, state=state)
    
    user_info = await state.get_data()
    if not user_info['is_admin']:
        return
    
    data = []
    for row in database.get_users():
        data.append([element for element in row])
    head = ['id', 'tg_id', 'username', 'is_admin', 'sub_start', 'sub_end', 'pay_money', 'town_search']
         
    with open('files/users_info.txt', 'w', encoding='utf-8') as file:
        file.write(tabulate(data, headers=head, tablefmt="grid"))
    document = FSInputFile('files/users_info.txt')
    await message.answer_document(document, reply_markup=keyboard)
    document = ''
    

async def get_logs_handler(message: Message, state: FSMContext) -> None:
    await identification_user(message=message, state=state)
    
    user_info = await state.get_data()
    if not user_info['is_admin']:
        return
    
    document = FSInputFile('info.log')
    await message.answer_document(document, reply_markup=keyboard)
    document = ''
    
    
async def give_sub_handler(message: Message, state: FSMContext, command: CommandObject) -> None:
    await identification_user(message=message, state=state)
    
    user_info = await state.get_data()
    if not user_info['is_admin']:
        return
    
    user_id = command.args
    if not user_id:
        await message.answer(
            '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ [üîëID] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–ø–∏–º–µ—Ä /get_user_by_id 123456789',
            reply_markup=keyboard
        )
        return
    
    try:
        database.user_renew_subscription(tg_id=user_id, amount=0)
        await message.answer(
            f'–ü—Ä–æ–¥–ª–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id={user_id} –Ω–∞ –º–µ—Å—è—Ü',
            reply_markup=keyboard
        )
    except:
        await message.answer(
            f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id={user_id}',
            reply_markup=keyboard
        )
