from aiogram import types
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from dblogic.database import database

from botlogic.settings import bot
from botlogic import components

import logging
from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)



town_translate = {'–º–æ—Å–∫–≤–∞': 'moskva', 'moskva': '–º–æ—Å–∫–≤–∞', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 'sankt-peterburg', 'sankt-peterburg': '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 'ekaterinburg', 'ekaterinburg': '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä': 'krasnodar', 'krasnodar': '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä'}



async def identification_user(message: Message, state: FSMContext) -> None:
    state_info = await state.get_data()
    if state_info.get('id', 0) != message.from_user.id:
        user_info = database.add_user(tg_id=message.from_user.id, username=message.from_user.username)
        await state.update_data(
            id = user_info[0],
            tg_id = user_info[1],
            username = user_info[2],
            is_admin = user_info[3],
            sub_start = user_info[4],
            sub_end = user_info[5],
            pay_money = user_info[6],
            town_search = user_info[7],
            ref_activated = user_info[8],
            ref_voted = user_info[9],
            ref_data = user_info[10]
        )
        
        
        

async def buy_sub_handler(message: Message, state: FSMContext) -> None:
    await identification_user(message=message, state=state)
    await message.answer('–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars ‚≠êÔ∏è\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã —á–µ—Ä–µ–∑ @PremiumBot')
    
    sub_price = 750
    user_info = await state.get_data()
    if user_info['ref_activated']:
        sub_price = 350
    
    await message.answer_invoice(
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
            description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü",
            currency="XTR",
            is_flexible=False,
            prices=[
                types.LabeledPrice(
                    label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
                    amount=sub_price
                )
            ],
            start_parameter="one-month-subscription",
            payload="test-invoice-payload"
    )
    
    
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
    

async def successful_payment_handler(message: Message, state: FSMContext) -> None:
    logging.info(f'SUCCESSFUL PAYMENT: tg_id={message.from_user.id}')

    await identification_user(message=message, state=state)	
    user_info = await state.get_data()
    database.user_renew_subscription(
        tg_id=user_info['tg_id'],
        amount=message.successful_payment.total_amount
    )
    if user_info['ref_activated']:
       database.user_del_ref(tg_id=user_info['tg_id'])
    
    await identification_user(message=message, state=state)
    user_info = await state.get_data()
    
    await message.answer(
        f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ.\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ <code>{user_info['sub_end']}</code>",
        reply_markup=components.keyboard
    )
    
    

async def get_town_keyboard_handler(message: Message, state: FSMContext) -> None:
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–ú–æ—Å–∫–≤–∞"),
                    KeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),
                ],
                [
                    KeyboardButton(text="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"),
                    KeyboardButton(text="–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"),
                ]
            ],
            resize_keyboard=True,
        )
    )
    
    
async def change_town_handler(message: Message, state: FSMContext) -> None:
    await identification_user(message=message, state=state)
    database.user_change_city(tg_id=message.from_user.id, town=town_translate[message.text.lower()])
    await message.answer(
        f'–ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {message.text}',
        reply_markup=components.keyboard
    )


async def process_callback_button_ref(callback_query: CallbackQuery, state: FSMContext):
    await identification_user(message=callback_query, state=state)
    await bot.answer_callback_query(callback_query.id)
    
    user_info = await state.get_data()
    if user_info['ref_voted']:
        await bot.send_message(callback_query.from_user.id, '–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞')
        return
    
    await bot.send_message(callback_query.from_user.id, '–í–≤–æ–¥–∏—Ç—å username –∏–ª–∏ üîë ID –¥—Ä—É–≥–∞. username –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ @. üîë ID –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º')
    await state.set_state(components.Form.referral_username)
    
    
async def capture_referral_username(message: Message, state: FSMContext):
    referral = message.text
    
    await identification_user(message=message, state=state)
    user_info = await state.get_data()
    if referral.isdigit():
        if len(database.get_users(tg_id=referral, sub_active=True)):
            await message.answer(
                f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω.\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∞.'''
            )
            database.user_set_ref(tg_id=user_info['tg_id'], ref=referral)
            
        else:
            await message.answer(
                f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID={referral} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞\n–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start'''
            )
    else:
        if len(database.get_users(username=referral, sub_active=True)):
            await message.answer(
                f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω.\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∞.'''
            )
            database.user_set_ref(tg_id=user_info['tg_id'], ref=referral)
            
        else:
            await message.answer(
                f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username={referral} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞\n–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start'''
            )

    await state.clear()
